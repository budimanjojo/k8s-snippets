{
  "Kubernetes ConfigMap": {
    "prefix": ["kcm", "k-cm", "kconfigmap", "k-configmap"],
    "description": "Kubernetes ConfigMap",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/configmap-v1.json",
      "apiVersion: v1",
      "kind: ConfigMap",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "data:",
      "  ${2:key}: ${3:value}$0"
    ]
  },

  "Kubernetes Deployment": {
    "prefix": ["kdeploy", "k-deploy", "kdeployment", "k-deployment"],
    "description": "Kubernetes Deployment",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/deployment-apps-v1.json",
      "apiVersion: apps/v1",
      "kind: Deployment",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  replicas: 1",
      "  strategy:",
      "    type: Recreate",
      "  selector:",
      "    matchLabels:",
      "      app.kubernetes.io/name: ${1:name}",
      "  template:",
      "    metadata:",
      "      labels:",
      "        app.kubernetes.io/name: ${1:name}",
      "    spec:",
      "      containers:",
      "        - name: ${1:name}",
      "          image: ${2:image}:${3:latest}",
      "          imagePullPolicy: ${4|IfNotPresent,Always,Never|}",
      "          resources:",
      "            requests:",
      "              cpu: ${5:100m}",
      "              memory: ${6:100Mi}",
      "            limits:",
      "              cpu: ${7:100m}",
      "              memory: ${8:100Mi}",
      "          ports:",
      "            - name: ${9:http}",
      "              protocol: TCP",
      "              containerPort: ${10:80}",
      "          volumeMounts:",
      "            - name: ${1:name}-config",
      "              mountPath: {11:/config}",
      "          startupProbe:",
      "            tcpSocket:",
      "              port: ${9:http}",
      "            initialDelaySeconds: 5",
      "            timeoutSeconds: 1",
      "            periodSeconds: 5",
      "            successThreshold: 1",
      "            failureThreshold: 30",
      "          livenessProbe:",
      "            tcpSocket:",
      "              port: ${9:http}",
      "            initialDelaySeconds: 5",
      "            timeoutSeconds: 1",
      "            periodSeconds: 10",
      "            successThreshold: 1",
      "            failureThreshold: 3",
      "          readinessProbe:",
      "            tcpSocket:",
      "              port: ${9:http}",
      "            initialDelaySeconds: 5",
      "            timeoutSeconds: 1",
      "            periodSeconds: 10",
      "            successThreshold: 1",
      "            failureThreshold: 3",
      "          env:",
      "            - name: ${12:TZ}",
      "              value: ${13:value}$0"
    ]
  },

  "Kubernetes Namespace": {
    "prefix": ["knamespace", "k-namespace", "kns", "k-ns"],
    "description": "Kubernetes Namespace",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/namespace-v1.json",
      "apiVersion: v1",
      "kind: Namespace",
      "metadata:",
      "  name: ${1:name}$0"
    ]
  },

  "Kubernetes PersistentVolume": {
    "prefix": ["kpersistentvolume", "k-persistentvolume", "kpv", "k-pv"],
    "description": "Kubernetes PersistentVolumeClaim",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/persistentvolume-v1.json",
      "apiVersion: v1",
      "kind: PersistentVolume",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  accessModes:",
      "    - ${2|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
      "  capacity:",
      "    storage: ${3:1Gi}",
      "  persistentVolumeReclaimPolicy: ${4|Delete,Retain,Recycle|}",
      "  storageClassName: ${5|rook-ceph-block,nfs-provisioner,default|}$0"
    ]
  },

  "Kubernetes StorageClass": {
    "prefix": ["kstorageclass", "k-storageclass", "ksc", "k-sc"],
    "description": "Kubernetes StorageClass",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/storageclass-storage-v1.json",
      "apiVersion: v1",
      "kind: StorageClass",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "provisioner: ${2:rook-ceph}",
      "allowVolumeExpansion: ${3|true,false|}",
      "reclaimPolicy: ${4|Delete,Retain,Recycle|}$0"
    ]
  },

  "Kubernetes PersistentVolumeClaim": {
    "prefix": ["kpersistentvolumeclaim", "k-persistentvolumeclaim", "kpvc", "k-pvc"],
    "description": "Kubernetes PersistentVolumeClaim",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/persistentvolumeclaim-v1.json",
      "apiVersion: v1",
      "kind: PersistentVolumeClaim",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  accessModes:",
      "    - ${2|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
      "  resources:",
      "    requests:",
      "      storage: ${3:1Gi}",
      "  storageClassName: ${4|rook-ceph-block,nfs-provisioner,default|}$0"
    ]
  },

  "Kubernetes Secret": {
    "prefix": ["ksecret", "k-secret"],
    "description": "Kubernetes Secret",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/secret-v1.json",
      "apiVersion: v1",
      "kind: Secret",
      "metadata:",
      "  name: ${1:name}-secret",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "type: Opaque",
      "stringData:",
      "  $0"
    ]
  },

  "Kubernetes Service": {
    "prefix": ["kservice", "k-service", "ksvc", "k-svc"],
    "description": "Kubernetes Service",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/service-v1.json",
      "apiVersion: v1",
      "kind: Service",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  selector:",
      "    app.kubernetes.io/name: ${1:name}",
      "  ports:",
      "    - name: ${2:http}",
      "      protocol: TCP",
      "      port: ${3:80}",
      "      targetPort: ${4:http}",
      "  type: ClusterIP$0"
    ]
  },

  "Kubernetes Job": {
    "prefix": ["kjob", "k-job"],
    "description": "Kubernetes Job",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/job-batch-v1.json",
      "apiVersion: batch/v1",
      "kind: Job",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  template:",
      "    metadata:",
      "      name: ${1:name}",
      "      labels:",
      "        app.kubernetes.io/name: ${1:name}",
      "    spec:",
      "      containers:",
      "        - name: ${1:name}",
      "          image: ${2:image}:${3:latest}",
      "          command:",
      "            - sh",
      "            - -c",
      "            - ${4:date; echo 'HELLO!'}",
      "          volumeMounts:",
      "            - name: ${5:timezone}",
      "              mountPath: ${6:/usr/share/zoneinfo}",
      "          env:",
      "            - name: ${7:TZ}",
      "              value: ${8:value}",
      "      volumes:",
      "        - name: ${5:timezone}",
      "          ${9|hostPath:\n            path: /usr/share/zoneinfo,emptyDir: {},persistentVolumeClaim:\n            claimName: ,configMap:\n            name: ,secret:\n            secretName: |}",
      "      restartPolicy: ${10|OnFailure,Never|}$0"
    ]
  },

  "Kubernetes CronJob": {
    "prefix": ["kcronjob", "k-cronjob", "kcj", "k-cj"],
    "description": "Kubernetes CronJob",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/cronjob-batch-v1.json",
      "apiVersion: batch/v1",
      "kind: CronJob",
      "metadata:",
      "  name: ${1:name}",
      "spec:",
      "  schedule: \"${2:*} ${3:*} ${4:*} ${5:*} ${6:*}\"",
      "  jobTemplate:",
      "    spec:",
      "      template:",
      "        spec:",
      "          containers:",
      "            - name: ${1:name}",
      "              image: ${7:image}:${8:latest}",
      "              args: ['/bin/sh', '-c', '${6:date; echo Hello from the Kubernetes cluster}']",
      "                - /bin/sh",
      "                - -c",
      "                - ${9:date; echo 'HELLO!'}",
      "          restartPolicy: ${10|OnFailure,Never|}$0"
    ]
  },

  "Kubernetes Ingress": {
    "prefix": ["kingress", "k-ingress", "king", "k-ing"],
    "description": "Kubernetes Ingress with Rewrite rule",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/ingress-networking-v1.json",
      "apiVersion: networking.k8s.io/v1",
      "kind: Ingress",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "  annotations:",
      "    nginx.ingress.kubernetes.io/${2:whitelist-source-range}: ${3:10.0.0.0/8}",
      "spec:",
      "  ingressClassName: ${4:nginx}",
      "  rules:",
      "    - host: ${5:example.foo.com}",
      "      http:",
      "        paths:",
      "          - path: ${6:/api/(.*)}",
      "            pathType: Prefix",
      "            backend:",
      "              service:",
      "                name: ${1:name}",
      "                port:",
      "                  number: ${7:80}",
      "  tls:",
      "    - hosts:",
      "        - ${5:example.foo.com}$0"
    ]
  },

  "Kubernetes Pod": {
    "prefix": ["kpod", "k-pod", "kpo", "k-po"],
    "description": "Kubernetes Pod",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/pod-v1.json",
      "apiVersion: v1",
      "kind: Pod",
      "metadata:",
      "  name: \"${1:name}\"",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  containers:",
      "    - name: ${1:name}",
      "      image: ${2:image}:${3:latest}",
      "      resources:",
      "        requests:",
      "          cpu: ${4:100m}",
      "          memory: ${5:100Mi}",
      "        limits:",
      "          cpu: ${6:100m}",
      "          memory: ${7:100Mi}",
      "      env:",
      "        - name: ${8:TZ}",
      "          valueFrom:",
      "            configMapKeyRef:",
      "              name: ${1:name}-config",
      "              key: ${8:TZ}",
      "      ports:",
      "        - containerPort: ${9:80}",
      "          name: ${10:http}",
      "      volumeMounts:",
      "        - name: ${11:timezone}",
      "          mountPath: ${6:/usr/share/zoneinfo}",
      "  volumes:",
      "    - name: ${11:timezone}",
      "      hostPath:",
      "        path: /usr/share/zoneinfo/Asia/Taipei",
      "        ${9|hostPath:\n            path: /usr/share/zoneinfo,emptyDir: {},persistentVolumeClaim:\n            claimName: ,configMap:\n            name: ,secret:\n            secretName: |}",
      "  restartPolicy: Always$0"
    ]
  },

  "Kubernetes DaemonSet": {
    "prefix": ["kdaemonset", "k-daemonset", "kds", "k-ds"],
    "description": "Kubernetes DaemonSet",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/daemonset-apps-v1.json",
      "apiVersion: apps/v1",
      "kind: DaemonSet",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  selector:",
      "    matchLabels:",
      "      app.kubernetes.io/name: ${1:name}",
      "  template:",
      "    metadata:",
      "      labels:",
      "        app.kubernetes.io/name: ${1:name}",
      "    spec:",
      "      containers:",
      "        - name: ${1:name}",
      "          image: ${2:image}:${3:latest}",
      "          resources:",
      "            requests:",
      "              cpu: ${4:100m}",
      "              memory: ${5:100Mi}",
      "            limits:",
      "              cpu: ${6:100m}",
      "              memory: ${7:100Mi}",
      "          volumeMounts:",
      "            - name: ${8:timezone}",
      "              mountPath: ${9:/usr/share/zoneinfo}",
      "      volumes:",
      "        - name: ${8:timezone}",
      "          ${10|hostPath:\n            path: /usr/share/zoneinfo,emptyDir: {},persistentVolumeClaim:\n            claimName: ,configMap:\n            name: ,secret:\n            secretName: |}"
    ]
  },

  "Kubernetes StatefulSet": {
    "prefix": ["kstatefulset", "k-statefulset", "ksts", "k-sts"],
    "description": "Kubernetes StatefulSet",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/statefulset-apps-v1.json",
      "apiVersion: apps/v1",
      "kind: StatefulSet",
      "metadata:",
      "  name: ${1:name}",
      "spec:",
      "  selector:",
      "    matchLabels:",
      "      app.kubernetes.io/name: ${1:name}",
      "  serviceName: ${1:name}",
      "  replicas: ${2:1}",
      "  template:",
      "    metadata:",
      "      labels:",
      "        app.kubernetes.io/name: ${1:name}",
      "    spec:",
      "      terminationGracePeriodSeconds: 10",
      "      containers:",
      "        - name: ${1:name}",
      "          image: ${2:image}:${3:latest}",
      "          ports:",
      "            - name: ${4:http}",
      "              containerPort: ${5:80}",
      "          volumeMounts:",
      "            - name: ${6:www}",
      "              mountPath: ${7:/usr/share/nginx/html}",
      "  volumeClaimTemplates:",
      "    - metadata:",
      "        name: ${6:www}",
      "      spec:",
      "        storageClassName: ${7|rook-ceph-block,nfs-provisioner,default|}",
      "        accessModes:",
      "          - ${8|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
      "        resources:",
      "          requests:",
      "            storage: ${9:1Gi}$0"
    ]
  },

  "Kubernetes Endpoints": {
    "prefix": ["kendpoints", "k-endpoints", "kep", "k-ep"],
    "description": "Kubernetes Endpoints",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/endpoints-v1.json",
      "apiVersion: v1",
      "kind: Endpoints",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "subsets:",
      "  - addresses:",
      "      - ip: ${2:10.0.0.1}",
      "    ports:",
      "      - name: ${3:http}",
      "        port: ${4:80}",
      "        protocol: ${5|TCP,UDP|}$0"
    ]
  },

  "Kubernetes ServiceAccount": {
    "prefix": ["kserviceaccount", "k-serviceaccount", "ksa", "k-sa"],
    "description": "Kubernetes ServiceAccount",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/serviceaccount-v1.json",
      "apiVersion: v1",
      "kind: ServiceAccount",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}$0"
    ]
  },

  "Kubernetes ClusterRoleBinding": {
    "prefix": ["kclusterrolebinding", "k-clusterrolebinding"],
    "description": "Kubernetes ClusterRoleBinding",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/clusterrolebinding-rbac-v1.json",
      "apiVersion: rbac.authorization.k8s.io/v1",
      "kind: ClusterRoleBinding",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "roleRef:",
      "  apiGroup: rbac.authorization.k8s.io",
      "  kind: ClusterRole",
      "  name: ${1:name}",
      "subjects:",
      "  - kind: ServiceAccount",
      "    name: ${2:name}",
      "    namespace: ${3:default}$0"
    ]
  },

  "Kubernetes RoleBinding": {
    "prefix": ["krolebinding", "k-rolebinding"],
    "description": "Kubernetes RoleBinding",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/rolebinding-rbac-v1.json",
      "apiVersion: rbac.authorization.k8s.io/v1",
      "kind: RoleBinding",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "roleRef:",
      "  apiGroup: rbac.authorization.k8s.io",
      "  kind: Role",
      "  name: ${1:name}",
      "subjects:",
      "  - kind: ServiceAccount",
      "    name: ${2:name}",
      "    namespace: ${3:default}$0"
    ]
  },

  "Kubernetes ClusterRole": {
    "prefix": ["kclusterrole", "k-clusterrole"],
    "description": "Kubernetes ClusterRole",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/clusterrole-rbac-v1.json",
      "apiVersion: rbac.authorization.k8s.io/v1",
      "kind: ClusterRole",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "rules:",
      "  - apiGroups:",
      "      - ${2:\"\"}",
      "    resources:",
      "      - ${3:\"*\"}",
      "    verbs:",
      "      - ${4:create}$0"
    ]
  },

  "Kubernetes Role": {
    "prefix": ["krole", "k-role"],
    "description": "Kubernetes Role",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/role-rbac-v1.json",
      "apiVersion: rbac.authorization.k8s.io/v1",
      "kind: Role",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "rules:",
      "  - apiGroups:",
      "      - ${2:\"\"}",
      "    resources:",
      "      - ${3:\"*\"}",
      "    verbs:",
      "      - ${4:create}$0"
    ]
  },

  "Kubernetes NetworkPolicy": {
    "prefix": ["knetworkpolicy", "k-networkpolicy"],
    "description": "Kubernetes NetworkPolicy",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.32.0-standalone-strict/networkpolicy-networking-v1.json",
      "apiVersion: networking.k8s.io/v1",
      "kind: NetworkPolicy",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  $0"
    ]
  },

  "Kubernetes Kustomization": {
    "prefix": ["kkustomization", "k-kustomization"],
    "description": "Kubernetes Kustomization",
    "body": [
      "---",
      "# yaml-language-server: \\$schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/kustomization.json",
      "apiVersion: kustomize.config.k8s.io/v1beta1",
      "kind: Kustomization",
      "namespace: ${1:default}",
      "resources:",
      "  - $0"
    ]
  }
}
